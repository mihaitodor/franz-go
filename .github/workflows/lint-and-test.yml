name: lint and test

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  golangci:
    # if: github.repository == 'twmb/franz-go'
    runs-on: ubuntu-latest
    name: "golangci-lint on amd64"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: 1.19.2
      - uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  vet-arm:
    if: github.repository == 'twmb/franz-go'
    needs: golangci
    runs-on: ubuntu-latest
    name: "vet on arm"
    steps:
      - uses: actions/checkout@v3
        with:
          path: "repo"
      - uses: uraimo/run-on-arch-action@v2
        with:
          arch: armv6
          distro: bullseye
          run: |
            echo "updating"
            apt-get -qq -y update
            echo "installing wget"
            apt-get -qq -y install wget
            echo "downloading go"
            wget --quiet https://go.dev/dl/go1.19.2.linux-armv6l.tar.gz
            tar xzf go1.19.2.linux-armv6l.tar.gz
            mkdir bins
            export PATH=$(pwd)/go/bin:$(pwd)/bins:$PATH
            export GOBIN=$(pwd)/bins
            export CGO_ENABLED=0
            cd repo
            echo "go vet ./..."
            go vet ./...
            echo "installing staticcheck"
            go install honnef.co/go/tools/cmd/staticcheck@latest
            echo "staticcheck ./..."
            staticcheck -checks 'all,-ST1003,-SA1012,-ST1016,-SA1019,-SA2001' ./... # actually contains atomicalign check

  integration-test:
    # if: github.repository == 'twmb/franz-go'
    needs: golangci
    runs-on: ubuntu-latest
    name: "integration test kafka"
    container: golang:1.19.2
    services:
      # kafka:
      #   image: bitnami/kafka:latest
      #   ports:
      #     - 9092:9092
      #   env:
      #     KAFKA_ENABLE_KRAFT: yes
      #     KAFKA_CFG_PROCESS_ROLES: controller,broker
      #     KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      #     KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      #     KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      #     KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@127.0.0.1:9093
      #     # Set this to "PLAINTEXT://127.0.0.1:9092" if you want to run this container on localhost via Docker
      #     KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      #     KAFKA_CFG_BROKER_ID: 1
      #     ALLOW_PLAINTEXT_LISTENER: yes
      #     KAFKA_KRAFT_CLUSTER_ID: XkpGZQ27R3eTl3OdTm2LYA # 16 byte base64-encoded UUID
      #     # BITNAMI_DEBUG: true # Enable this to get more info on startup failures
      kafka:
        image: confluentinc/cp-kafka:7.2.1
        ports:
          - 9092:9092
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
          KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://broker:29092,PLAINTEXT_HOST://kafka:9092"
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
          KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
          KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
          KAFKA_JMX_PORT: 9101
          KAFKA_JMX_HOSTNAME: localhost
          KAFKA_PROCESS_ROLES: "broker,controller"
          KAFKA_NODE_ID: 1
          KAFKA_CONTROLLER_QUORUM_VOTERS: "1@broker:29093"
          KAFKA_LISTENERS: "PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092"
          KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
          KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
          KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
        volumes:
          - ${{github.workspace}}/.github/workflows/kafka:/tmp/kafka
        options: >-
          --entrypoint=/tmp/kafka/update_run.sh
          -v ${{github.workspace}}/.github/workflows/kafka:/tmp/kafka
    steps:
      - uses: actions/checkout@v3
      - run: go test ./...
        env:
          KGO_TEST_RF: 1
          KGO_SEEDS: kafka:9092
          KGO_TEST_RECORDS: 50000
